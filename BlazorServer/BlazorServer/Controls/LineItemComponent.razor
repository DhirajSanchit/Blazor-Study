@inject IUpdateCartQuantity _updateCartQuantity
@inject IDeleteFromCart _DeleteFromCart

<h3>LineItem</h3>

<li>
    <div class="col">
        <img src="@LineItem.Product.ImageLink"/>
    </div>
    <div class="col">
    <h5>@LineItem.Product.Name</h5> 
        <div>
            Quantity:&nbsp; &nbsp;
            <input type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange"/>
        </div>
        <div>
            Quantity:&nbsp; &nbsp;@LineItem.Product.Price.ToString("C")
        </div>
        <div class="col">
            <button class="btn btn-light" @onclick="@(() => DeleteProduct(LineItem.ProductId))">Delete</button>
        </div>
    
</div>
</li>

@code {
    
    [Parameter]
    public LineItem LineItem { get; set; }

    [Parameter]
    public  EventCallback<Order> OnDeleteProduct { get; set;}
    
    [Parameter]
    public  EventCallback<Order> OnUpdateQuantity { get; set;}
    async void HandleQuantityChange(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs == null || string.IsNullOrWhiteSpace(changeEventArgs.Value.ToString())) return;
        int quantity = 0;
        if (int.TryParse(changeEventArgs.Value.ToString(), out quantity))
        {
            if (quantity < 0)
            {
                return;
            }
            var order = await _updateCartQuantity.Execute(LineItem.ProductId, quantity);
            await OnUpdateQuantity.InvokeAsync();
        }
    }

    async void DeleteProduct(int productid)
    {
        var order =  await _DeleteFromCart.Execute(productid);
        await OnDeleteProduct.InvokeAsync(order);
    }

}